// #[derive(Resource)]
// pub struct WorldState(HashMap<Entity, EntityState>);

// impl WorldState {
//     pub fn new() -> Self {
//         WorldState(HashMap::new())
//     }

//     pub fn add_fact(&mut self, entity: Entity, name: String, fact: WorldFact) {
//         let entity_state = self.0.entry(entity).or_insert_with(EntityState::new);
//         entity_state.facts.insert(name, fact);
//     }

//     pub fn get_fact(&self, entity: Entity, name: &str) -> Option<&WorldFact> {
//         self.0
//             .get(&entity)
//             .and_then(|entity_state| entity_state.facts.get(name))
//     }

//     pub fn remove_fact(&mut self, entity: Entity, name: &str) -> Option<WorldFact> {
//         self.0
//             .get_mut(&entity)
//             .and_then(|entity_state| entity_state.facts.remove(name))
//     }

//     pub fn remove_entity(&mut self, entity: Entity) -> Option<EntityState> {
//         self.0.remove(&entity)
//     }

//     pub fn get_entity_state(&self, entity: Entity) -> Option<&EntityState> {
//         self.0.get(&entity)
//     }
// }
// //#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
// //pub enum ResourceType {
// //  Food,
// //    Water,
// // Add other resource types as needed
// //}
// #[derive(Component, Clone, Debug)]
// pub struct EntityState {
//     pub facts: HashMap<String, WorldFact>,
// }
// impl EntityState {
//     pub fn new() -> Self {
//         Self {
//             facts: HashMap::new(),
//         }
//     }

//     pub fn add_fact(&mut self, name: String, fact: WorldFact) {
//         self.facts.insert(name, fact);
//     }

//     pub fn get_fact(&self, name: &str) -> Option<&WorldFact> {
//         self.facts.get(name)
//     }

//     pub fn remove_fact(&mut self, name: &str) -> Option<WorldFact> {
//         self.facts.remove(name)
//     }

//     pub fn remove_entity(&mut self) -> Option<EntityState> {
//         let mut entity_state = EntityState::new();
//         std::mem::swap(&mut entity_state, self);
//         Some(entity_state)
//     }
// }

// impl PartialEq for WorldState {
//     fn eq(&self, other: &Self) -> bool {
//         let facts_self = self.clone();
//         let facts_other = other.clone();

//         facts_self == facts_other
//     }
// }

// impl Eq for WorldState {}

// #[derive(Clone, Debug, PartialOrd, Ord)]
// pub enum WorldFact {
//     Position(QIVec3), // Relative Position
//     PrecisePosition(QVec3),
//     Rotation(i64), // Absolute Position
//     //  Interacting(i32),    // Used in squads so that squad members don't interact with the same entity
//     IsSafe(bool), // No enemies nearby (bool) false = in danger
//                   // HasResource(ResourceType), // Resource Type (enum) Food, Water, etc.
//                   // InRange(QIVec3),           // Range
//                   // HasEnergy(i32),   // Energy Level                   // Add other world facts as needed
// }

// impl PartialEq for WorldFact {
//     fn eq(&self, other: &Self) -> bool {
//         use WorldFact::*;
//         match (self, other) {
//             (Position(a), Position(b)) => a == b,
//             (PrecisePosition(a), PrecisePosition(b)) => a == b,
//             (Rotation(a), Rotation(b)) => a == b,
//             // (Interacting(a), Interacting(b)) => a == b,
//             //       (IsSafe(a), IsSafe(b)) => a == b,
//             //       (HasResource(a), HasResource(b)) => a == b,
//             //         (InRange(a), InRange(b)) => a == b,
//             //          (HasEnergy(a), HasEnergy(b)) => a == b,
//             _ => false,
//         }
//     }
// }

//impl Eq for WorldFact {}


            .priority(Box::new(
                |world_state: WorldState<WorldFact, WorldValue>| {
                    world_state
                        .iter()
                        .map(|fact: (&WorldFact, &WorldValue)| {
                            if fact.0 == WorldFact::CollectResource {
                                fact.1
                            } else {
                                &WorldValue::None
                            }
                        })
                        .sum()
                },
            ))

            .priority(|world_state| {
                world_state
                    .map(|fact| if fact == WorldFact::IsEnemy { 1 } else { 0 })
                    .sum()
            })